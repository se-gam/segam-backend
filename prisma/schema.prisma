generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Department {
  name      String    @id
  createdAt DateTime  @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")
  users     User[]

  @@map("department")
}

model Course {
  id          String       @id @default(uuid())
  ecampusId   Int?         @map("ecampus_id")
  courseId    String       @map("course_id")
  name        String
  semester    String
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  deletedAt   DateTime?    @map("deleted_at")
  users       UserCourse[]
  lectures    Lecture[]
  assignments Assignment[]

  @@unique([courseId, semester])
  @@index([ecampusId])
  @@map("course")
}

model User {
  studentId      String    @id @map("student_id")
  name           String
  sejongPid      String    @map("sejong_pid")
  departmentName String?   @map("department_name")
  os             OS?       @map("os")
  pushToken      String?   @map("push_token")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  deletedAt      DateTime? @map("deleted_at")

  department       Department?        @relation(fields: [departmentName], references: [name])
  assignments      UserAssignment[]
  courses          UserCourse[]
  lectures         UserLecture[]
  reservations     UserReservation[]
  friend1          Friend[]           @relation("user1")
  friend2          Friend[]           @relation("user2")
  GodokReservation GodokReservation[]
  GodokStatus      GodokStatus[]

  @@map("user")
}

model UserCourse {
  id          Int      @id @default(autoincrement())
  studentId   String   @map("student_id")
  courseId    String   @map("course_id")
  courseOldId String?  @map("course_old_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user   User    @relation(fields: [studentId], references: [studentId])
  course Course? @relation(fields: [courseId], references: [id], onDelete: Restrict)

  @@unique([studentId, courseId])
  @@map("user_course")
}

model Lecture {
  id          Int           @id
  courseId    String        @map("course_id")
  courseOldId String?       @map("course_old_id")
  name        String
  week        Int
  endsAt      DateTime      @map("ends_at")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  deletedAt   DateTime?     @map("deleted_at")
  startsAt    DateTime      @map("starts_at")
  course      Course?       @relation(fields: [courseId], references: [id], onDelete: Restrict)
  users       UserLecture[]

  @@map("lecture")
}

model UserLecture {
  id        Int      @id @default(autoincrement())
  studentId String   @map("student_id")
  lectureId Int      @map("lecture_id")
  isDone    Boolean  @map("is_done")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  lecture   Lecture  @relation(fields: [lectureId], references: [id])
  user      User     @relation(fields: [studentId], references: [studentId])

  @@unique([studentId, lectureId])
  @@map("user_lecture")
}

model Assignment {
  id          Int              @id
  courseId    String           @map("course_id")
  courseOldId String?          @map("course_old_id")
  name        String
  week        Int
  endsAt      DateTime?        @map("ends_at")
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")
  deletedAt   DateTime?        @map("deleted_at")
  course      Course?          @relation(fields: [courseId], references: [id], onDelete: Restrict)
  users       UserAssignment[]

  @@map("assignment")
}

model UserAssignment {
  id           Int        @id @default(autoincrement())
  studentId    String     @map("student_id")
  assignmentId Int        @map("assignment_id")
  isDone       Boolean    @map("is_done")
  createdAt    DateTime   @default(now()) @map("created_at")
  user         User       @relation(fields: [studentId], references: [studentId])
  assignment   Assignment @relation(fields: [assignmentId], references: [id])

  @@unique([studentId, assignmentId])
  @@map("user_assignment")
}

model Studyroom {
  id             Int                    @id @default(autoincrement())
  name           String
  location       String
  operatingHours String                 @map("operating_hours")
  minUsers       Int                    @map("min_users")
  maxUsers       Int                    @map("max_users")
  isCinema       Boolean                @map("is_cinema")
  createdAt      DateTime               @default(now()) @map("created_at")
  updatedAt      DateTime               @updatedAt @map("updated_at")
  deletedAt      DateTime?              @map("deleted_at")
  tags           String[]               @map("tags")
  slots          StudyroomSlot[]
  reservations   StudyroomReservation[]

  @@map("studyroom")
}

model StudyroomSlot {
  id          String   @id
  studyroomId Int      @map("studyroom_id")
  date        DateTime @db.Date
  startsAt    Int      @map("starts_at")
  isReserved  Boolean  @map("is_reserved")
  isClosed    Boolean  @map("is_closed")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  studyroom    Studyroom         @relation(fields: [studyroomId], references: [id])
  reservations ReservationSlot[]

  @@unique([studyroomId, date, startsAt])
  @@map("studyroom_slot")
}

model StudyroomReservation {
  id            Int       @id
  pid           Int
  studyroomId   Int       @map("studyroom_id")
  reserveReason String
  cancelReason  String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  deletedAt     DateTime?

  studyroom Studyroom         @relation(fields: [studyroomId], references: [id])
  slots     ReservationSlot[]
  users     UserReservation[]

  @@map("studyroom_reservation")
}

model ReservationSlot {
  id                   Int                  @id @default(autoincrement())
  slotId               String               @map("slot_id")
  reservationId        Int                  @map("reservation_id")
  studyroomReservation StudyroomReservation @relation(fields: [reservationId], references: [id])
  studyroomSlot        StudyroomSlot        @relation(fields: [slotId], references: [id])

  @@unique([slotId, reservationId])
  @@map("reservation_slot")
}

model UserReservation {
  id                   Int                  @id @default(autoincrement())
  studentId            String               @map("student_id")
  reservationId        Int                  @map("reservation_id")
  isLeader             Boolean              @map("is_leader")
  createdAt            DateTime             @default(now()) @map("created_at")
  deletedAt            DateTime?            @map("deleted_at")
  studyroomReservation StudyroomReservation @relation(fields: [reservationId], references: [id])
  user                 User                 @relation(fields: [studentId], references: [studentId])

  @@unique([studentId, reservationId])
  @@map("user_reservation")
}

model Friend {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  deletedAt     DateTime? @map("deleted_at")
  receiveUserId String    @map("receive_user_id")
  requestUserId String    @map("request_user_id")
  receiveUser   User      @relation("user2", fields: [receiveUserId], references: [studentId])
  requestUser   User      @relation("user1", fields: [requestUserId], references: [studentId])

  @@unique([requestUserId, receiveUserId])
  @@map("friend")
}

model BookCategory {
  id          Int    @id
  name        String
  targetCount Int    @map("target_count")
  Book        Book[]

  @@map("book_category")
}

model Book {
  id             Int       @id
  title          String
  bookCategoryId Int       @map("book_category_id")
  createdAt      DateTime  @default(now()) @map("created_at")
  deletedAt      DateTime? @map("deleted_at")

  bookCategory     BookCategory       @relation(fields: [bookCategoryId], references: [id])
  GodokReservation GodokReservation[]

  @@map("book")
}

model GodokSlot {
  id             String    @id @default(uuid())
  slotId         String?   @map("slot_id")
  startsAt       DateTime  @unique @map("starts_at")
  availableSeats Int       @map("available_seats")
  totalSeats     Int       @map("total_seats")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  deletedAt      DateTime? @map("deleted_at")

  @@map("godok_slot")
}

model GodokReservation {
  id            String    @id @default(uuid())
  reservationId String    @unique @map("reservation_id")
  studentId     String    @map("student_id")
  bookId        Int       @map("book_id")
  startsAt      DateTime  @map("starts_at")
  createdAt     DateTime  @default(now()) @map("created_at")
  deletedAt     DateTime? @map("deleted_at")

  user User @relation(fields: [studentId], references: [studentId])
  book Book @relation(fields: [bookId], references: [id])

  @@map("godok_revervation")
}

model GodokStatus {
  id        String  @id @default(uuid())
  status    Boolean
  studentId String  @unique @map("student_id")
  counts    Int[]   @map("counts")

  user User @relation(fields: [studentId], references: [studentId])

  @@map("godok_status")
}

model Restaurant {
  id   Int    @id @default(autoincrement())
  name String

  @@map("restaurant")
}

enum OS {
  IOS
  ANDROID

  @@map("os")
}
